{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["stripePromise","loadStripe","CheckoutForm","stripe","useStripe","elements","useElements","useState","loading","setLoading","handleSubmit","e","a","preventDefault","createPaymentMethod","type","card","getElement","CardElement","error","paymentMethod","id","axios","post","amount","data","console","log","clear","className","onSubmit","src","alt","disabled","role","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"qVAcMA,EAAgBC,YAAW,+GAE3BC,EAAe,WACnB,IAAMC,EAASC,sBACTC,EAAWC,wBAFQ,EAIKC,oBAAS,GAJd,mBAIlBC,EAJkB,KAITC,EAJS,KAMnBC,EAAY,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,6DACnBD,EAAEE,iBADiB,SAGoBV,EAAOW,oBAAoB,CAChEC,KAAM,OACNC,KAAMX,EAASY,WAAWC,iBALT,mBAGXC,EAHW,EAGXA,MAAOC,EAHI,EAGJA,cAIfX,GAAW,GAENU,EATc,wBAWTE,EAAOD,EAAPC,GAXS,mBAaQC,IAAMC,KAC3B,qCACA,CACEF,KACAG,OAAQ,MAjBG,iBAaPC,EAbO,EAaPA,KAORC,QAAQC,IAAIF,GAEZpB,EAASY,WAAWC,eAAaU,QAtBlB,kDAwBfF,QAAQC,IAAR,MAxBe,QA0BjBlB,GAAW,GA1BM,0DAAH,sDAgClB,OAFAiB,QAAQC,KAAKxB,GAAUK,GAGrB,0BAAMqB,UAAU,iBAAiBC,SAAUpB,GAEzC,yBACEqB,IAAI,0HACJC,IAAI,8BACJH,UAAU,cAGZ,wBAAIA,UAAU,oBAAd,eAGA,yBAAKA,UAAU,cACb,kBAAC,cAAD,OAGF,4BAAQI,UAAW9B,EAAQ0B,UAAU,mBAClCrB,EACC,yBAAKqB,UAAU,4BAA4BK,KAAK,UAC9C,0BAAML,UAAU,WAAhB,eAGF,SAqBKM,MAdf,WACE,OACE,kBAAC,WAAD,CAAUhC,OAAQH,GAChB,yBAAK6B,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,8BACb,kBAAC,EAAD,WC7EQO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLO,QAAQP,MAAMA,EAAMkC,c","file":"static/js/main.36f9c795.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"bootswatch/dist/lux/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport {\n  Elements,\n  CardElement,\n  useStripe,\n  useElements,\n} from \"@stripe/react-stripe-js\";\n\nimport axios from \"axios\";\n\nconst stripePromise = loadStripe(\"pk_test_51HVbcYCDVR3Vf95dZ3VH0F0cNc9YZ5vVeu4M8Cr8RpbUeR7eG4NFrc86vcN9cm5K94NMKDyosnhNzoPSswBhGDxG00ujUCkZ9a\");\n\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: \"card\",\n      card: elements.getElement(CardElement),\n    });\n    setLoading(true);\n\n    if (!error) {\n      // console.log(paymentMethod)\n      const { id } = paymentMethod;\n      try {\n        const { data } = await axios.post(\n          \"http://localhost:3001/api/checkout\",\n          {\n            id,\n            amount: 10000, //cents\n          }\n        );\n        console.log(data);\n\n        elements.getElement(CardElement).clear();\n      } catch (error) {\n        console.log(error);\n      }\n      setLoading(false);\n    }\n  };\n\n  console.log(!stripe || loading);\n\n  return (\n    <form className=\"card card-body\" onSubmit={handleSubmit}>\n      {/* Product Information */}\n      <img\n        src=\"https://www.corsair.com/medias/sys_master/images/images/h80/hdd/9029904465950/-CH-9109011-ES-Gallery-K70-RGB-MK2-01.png\"\n        alt=\"Corsair Gaming Keyboard RGB\"\n        className=\"img-fluid\"\n      />\n\n      <h3 className=\"text-center my-2\">Price: 100$</h3>\n\n      {/* User Card Input */}\n      <div className=\"form-group\">\n        <CardElement />\n      </div>\n\n      <button disabled={!stripe} className=\"btn btn-success\">\n        {loading ? (\n          <div className=\"spinner-border text-light\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        ) : (\n          \"Buy\"\n        )}\n      </button>\n    </form>\n  );\n};\n\nfunction App() {\n  return (\n    <Elements stripe={stripePromise}>\n      <div className=\"container p-4\">\n        <div className=\"row h-100\">\n          <div className=\"col-md-4 offset-md-4 h-100\">\n            <CheckoutForm />\n          </div>\n        </div>\n      </div>\n    </Elements>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}